Lawnmover Algorithm:

Input: a positive integer n and a list of 2n disks of alternating colors light-dark, starting with light
Output: a list of 2n disks, the first n disks are light, the next n disks are dark, and an integer m representing the number of swaps to move the dark ones after the light ones.


User inputs array of LDLDLDLD


'L' = Light disk
'D' = Dark disk

final output: LLLLDDDD


def sort_lawnmover(list, n):
    numberOfSwaps = 0


    for k = 0 to ((n+1)/2)-1 do
        //left to right
        for i = 0 to 2*n-2 do:
            if (disk[i] == D && disk[i+1] == L)
                swap disk[i] and disk[i+1]
                numberOfSwaps++
            endif
        endfor

        //right to left
        for j = 2*n-1 to 1 do:
            if (disk[j] == L && disk[j-1] == D)
                swap disk[j] and disk[j-1]
                numberOfSwaps++
            endif
        endfor
    endfor

    return sortedDisk(diskState(list), numberOfSwaps)
end function


Alternate Algorithm:

def sort_alternate(list, n):
  numberOfSwaps = 0

  for k = 0 to n+1-1 do:
    // 0 2 4 6 ... n-1
    for i = 0 to 2*n-1 step 2
        if (disk[i] == 'D' && disk[i+1] == 'L')
            swap disk[i] and disk[i+1]
            numberOfSwaps++
        endif
    endfor

    // 1 3 5 ... n-2
    for j = 1 to 2*n-2 step 2
        if (disk[j] == 'D' && disk[j+1] == 'L')
            swap disk[j] and disk[j+1]
            numberOfSwaps++
        endif
    endfor
  endfor

  return sortedDisk(diskState(list), numberOfSwaps)
end function
